# Generated by Django 3.2.19 on 2023-06-25 01:04

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated at')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Required, PrimaryKey none-editable', primary_key=True, serialize=False, verbose_name='UUID Identifier')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this data is active or deleted', verbose_name='Active')),
                ('email', models.EmailField(error_messages={'unique': 'This email already exists.'}, help_text='Required, Please enter your Email Address.', max_length=255, null=True, unique=True, verbose_name='Email')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 256 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=255, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Username')),
                ('first_name', models.CharField(blank=True, max_length=128, verbose_name='First name')),
                ('middle_name', models.CharField(blank=True, max_length=128, verbose_name='Middle name')),
                ('last_name', models.CharField(blank=True, max_length=128, verbose_name='Last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date joined')),
                ('force_change_password', models.BooleanField(default=False, help_text='Force user to change password', verbose_name='Force change password')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auths_user_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auths_user_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('-created_at',),
            },
            bases=(models.Model, guardian.mixins.GuardianUserMixin),
        ),
    ]
